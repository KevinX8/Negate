@startuml
set namespaceSeparator ::

class "negate::analyser::sentiment_analysis.dart::SentimentAnalysis" {
  -String _modelFile
  -String _vocabFile
  -int _sentenceLen
  +String start
  +String pad
  +String unk
  +Map<String, int> dictionary
  +Interpreter sInterpreter
  +Future<void> init()
  -Future<void> _loadModel()
  -Future<void> _loadDictionary()
  +double classify()
  +List<List<double>> tokenizeInputText()
}

"negate::analyser::sentiment_analysis.dart::SentimentAnalysis" o-- "tflite_flutter::src::interpreter.dart::Interpreter"

class "negate::analyser::sentiment_analysis_mlkit.dart::SentimentAnalysisMLKit" {
  -LanguageIdentifier _languageIdentifier
  +Future<double> classifyMobile()
}

"negate::analyser::sentiment_analysis_mlkit.dart::SentimentAnalysisMLKit" o-- "google_mlkit_language_id::src::language_identifier.dart::LanguageIdentifier"
"negate::analyser::sentiment_analysis.dart::SentimentAnalysis" <|-- "negate::analyser::sentiment_analysis_mlkit.dart::SentimentAnalysisMLKit"

class "negate::logger::android_logger.dart::AndroidLogger" {
  {static} -AndroidLogger _instance
  +Future<void> startLogger()
  +Future<void> startAccessibility()
  {static} -void _accessibilityListener()
}

"negate::logger::android_logger.dart::AndroidLogger" o-- "negate::logger::android_logger.dart::AndroidLogger"
"negate::logger::logger.dart::SentenceLogger" <|-- "negate::logger::android_logger.dart::AndroidLogger"

class "negate::logger::logger.dart::SentenceLogger" {
  {static} -SentenceLogger _instance
  {static} -StringBuffer _sentence
  {static} -HashMap<String, AppList> _appMap
  {static} -HashSet<String> _appIcons
  {static} -TfParams _tfp
  {static} -int _updateFreq
  +RegExp blacklist
  -String _lastUsedApp
  -bool _dbUpdated
  +void logToDB()
  {static} -void _startBackground()
  +Future<void> startLogger()
  +String getSentence()
  +void writeToSentence()
  +void clearSentence()
  -void _setAppValues()
  +void addAppEntry()
  +void updateFGApp()
  +bool hasAppIcon()
  +void addAppIcon()
}

"negate::logger::logger.dart::SentenceLogger" o-- "negate::logger::logger.dart::SentenceLogger"
"negate::logger::logger.dart::SentenceLogger" o-- "dart::collection::HashMap<String, AppList>"
"negate::logger::logger.dart::SentenceLogger" o-- "dart::collection::HashSet<String>"
"negate::logger::logger.dart::SentenceLogger" o-- "negate::sentiment_db.dart::TfParams"

class "negate::logger::logger_factory.dart::LoggerFactory" {
  {static} +Future<void> startLoggerFactory()
  {static} +RegExp getLoggerRegex()
  {static} +Widget getDisclosureText()
}

class "negate::logger::win_logger.dart::WinLogger" {
  {static} -WinLogger _instance
  {static} -int _keyHook
  {static} -int _mouseHook
  {static} -DateTime _lastLogged
  +Future<void> startLogger()
  {static} -int _hookCallback()
  {static} -int _mouseCallback()
  -Future<void> _saveKey()
  -void _setHook()
  -String _getFGAppName()
  -String _formatName()
  +Uint8List? findAppIcon()
}

"negate::logger::win_logger.dart::WinLogger" o-- "negate::logger::win_logger.dart::WinLogger"
"negate::logger::logger.dart::SentenceLogger" <|-- "negate::logger::win_logger.dart::WinLogger"

class "negate::main.dart::ThemedHourlyUI" {
  +Future<void> initSystemTray()
  +Widget build()
}

"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "negate::main.dart::ThemedHourlyUI"

class "negate::main.dart::HourlyDashboard" {
  -bool _requested
  -BuildContext _context
  +Widget build()
  +Widget bottomTitles()
  +BarTouchData barTouchData()
  +Future<List<BarChartGroupData>> getHourBars()
  +void handleMenu()
}

"negate::main.dart::HourlyDashboard" o-- "flutter::src::widgets::framework.dart::BuildContext"
"flutter_riverpod::src::consumer.dart::ConsumerWidget" <|-- "negate::main.dart::HourlyDashboard"

class "negate::sentiment_db.dart::SentimentLogs" {
  +Set<Column<dynamic>> primaryKey
}

class "negate::sentiment_db.dart::AppIcons" {
  +Set<Column<dynamic>> primaryKey
}

class "negate::sentiment_db.dart::SentimentDB" {
  +int schemaVersion
  +Future<Uint8List> getAppIcon()
  +Future<HashSet<String>> getListOfIcons()
  +dynamic encoder()
  +dynamic reviver()
  +Future<String> jsonLogs()
  +Future<bool> jsonImport()
  -Future<List<MapEntry<String, List<double>>>> _getSentimentsByName()
  +Future<List<List<MapEntry<String, List<double>>>>> getRecommendations()
  +Future<List<MapEntry<String, List<double>>>> getDailyBreakdown()
  +Future<List<double>> getAvgHourlySentiment()
  +Future<List<SentimentLog>> getDaySentiment()
  {static} +Future<void> addAppIcon()
  {static} +Future<void> addSentiments()
}

"negate::sentiment_db.dart::_$SentimentDB" <|-- "negate::sentiment_db.dart::SentimentDB"

class "negate::sentiment_db.dart::IsolateStartRequest" {
  +SendPort sendDriftIsolate
  +String targetPath
}

"negate::sentiment_db.dart::IsolateStartRequest" o-- "dart::isolate::SendPort"

class "negate::sentiment_db.dart::TfParams" {
  +int iAddress
  +Map<String, int> dict
  +bool translate
}

class "negate::sentiment_db.dart::AppList" {
  +DateTime lastTimeUsed
  +double totalTimeUsed
  +int numPositive
  +int numNegative
}

class "negate::sentiment_db.dart::TfliteRequest" {
  +TfParams tfp
  +SharedPreferences prefs
}

"negate::sentiment_db.dart::TfliteRequest" o-- "negate::sentiment_db.dart::TfParams"
"negate::sentiment_db.dart::TfliteRequest" o-- "shared_preferences::shared_preferences.dart::SharedPreferences"
"negate::sentiment_db.dart::IsolateStartRequest" <|-- "negate::sentiment_db.dart::TfliteRequest"

class "negate::sentiment_db.dart::AddSentimentRequest" {
  +HashMap<String, AppList> sentiments
  +SendPort iPort
}

"negate::sentiment_db.dart::AddSentimentRequest" o-- "dart::collection::HashMap<String, AppList>"
"negate::sentiment_db.dart::AddSentimentRequest" o-- "dart::isolate::SendPort"

class "negate::sentiment_db.dart::AddAppIconRequest" {
  +String name
  +Uint8List icon
  +SendPort iPort
}

"negate::sentiment_db.dart::AddAppIconRequest" o-- "dart::typed_data::Uint8List"
"negate::sentiment_db.dart::AddAppIconRequest" o-- "dart::isolate::SendPort"

class "negate::sentiment_db.dart::$SentimentLogsTable" {
  -String? _alias
  +List<GeneratedColumn<dynamic>> $columns
  +String aliasedName
  +String actualTableName
  +Set<GeneratedColumn<dynamic>> $primaryKey
  +VerificationContext validateIntegrity()
  +SentimentLog map()
  +$SentimentLogsTable createAlias()
}

"negate::sentiment_db.dart::SentimentLogs" <|-- "negate::sentiment_db.dart::$SentimentLogsTable"
"drift::src::runtime::query_builder::query_builder.dart::TableInfo" <|-- "negate::sentiment_db.dart::$SentimentLogsTable"

class "negate::sentiment_db.dart::SentimentLog" {
  +String name
  +DateTime hour
  +int timeUsed
  +double avgScore
  +int hashCode
  +Map<String, Expression<dynamic>> toColumns()
  +SentimentLogsCompanion toCompanion()
  +Map<String, dynamic> toJson()
  +SentimentLog copyWith()
  +String toString()
  +bool ==()
}

"drift::src::runtime::data_class.dart::Insertable" <|-- "negate::sentiment_db.dart::SentimentLog"

class "negate::sentiment_db.dart::SentimentLogsCompanion" {
  {static} +Insertable<SentimentLog> custom()
  +SentimentLogsCompanion copyWith()
  +Map<String, Expression<dynamic>> toColumns()
  +String toString()
}

class "negate::sentiment_db.dart::$AppIconsTable" {
  -String? _alias
  +List<GeneratedColumn<dynamic>> $columns
  +String aliasedName
  +String actualTableName
  +Set<GeneratedColumn<dynamic>> $primaryKey
  +VerificationContext validateIntegrity()
  +AppIcon map()
  +$AppIconsTable createAlias()
}

"negate::sentiment_db.dart::AppIcons" <|-- "negate::sentiment_db.dart::$AppIconsTable"
"drift::src::runtime::query_builder::query_builder.dart::TableInfo" <|-- "negate::sentiment_db.dart::$AppIconsTable"

class "negate::sentiment_db.dart::AppIcon" {
  +String name
  +Uint8List icon
  +int hashCode
  +Map<String, Expression<dynamic>> toColumns()
  +AppIconsCompanion toCompanion()
  +Map<String, dynamic> toJson()
  +AppIcon copyWith()
  +String toString()
  +bool ==()
}

"negate::sentiment_db.dart::AppIcon" o-- "dart::typed_data::Uint8List"
"drift::src::runtime::data_class.dart::Insertable" <|-- "negate::sentiment_db.dart::AppIcon"

class "negate::sentiment_db.dart::AppIconsCompanion" {
  {static} +Insertable<AppIcon> custom()
  +AppIconsCompanion copyWith()
  +Map<String, Expression<dynamic>> toColumns()
  +String toString()
}

abstract class "negate::sentiment_db.dart::_$SentimentDB" {
  +$SentimentLogsTable sentimentLogs
  +$AppIconsTable appIcons
  +Iterable<TableInfo<Table, dynamic>> allTables
  +List<DatabaseSchemaEntity> allSchemaEntities
}

"negate::sentiment_db.dart::_$SentimentDB" o-- "negate::sentiment_db.dart::$SentimentLogsTable"
"negate::sentiment_db.dart::_$SentimentDB" o-- "negate::sentiment_db.dart::$AppIconsTable"

class "negate::ui::common_ui.dart::CommonUI" {
  {static} -bool _firstPage
  {static} +Widget infoPage()
  {static} +Future<void> showDisclosure()
  {static} +ButtonBar dateChanger()
  {static} +Color getBarColour()
  {static} +Widget appListView()
}

class "negate::ui::daily_breakdown.dart::DailyBreakdown" {
  {static} +Widget dashboard()
  {static} +List<PieChartSectionData> showingSections()
}

class "negate::ui::daily_breakdown.dart::_Badge" {
  +String appName
  +double size
  +Color borderColor
  +SentimentDB sdb
  +Widget build()
}

"negate::ui::daily_breakdown.dart::_Badge" o-- "dart::ui::Color"
"negate::ui::daily_breakdown.dart::_Badge" o-- "negate::sentiment_db.dart::SentimentDB"
"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "negate::ui::daily_breakdown.dart::_Badge"

class "negate::ui::globals.dart::DBMonitor" {
  +void set()
}

"state_notifier::state_notifier.dart::StateNotifier" <|-- "negate::ui::globals.dart::DBMonitor"

class "negate::ui::recommendations.dart::RecommendationsPage" {
  +Widget build()
}

"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "negate::ui::recommendations.dart::RecommendationsPage"

class "negate::ui::settings.dart::SettingsPage" {
  {static} +Widget build()
}

class "negate::ui::window_decorations.dart::WindowButtons" {
  +WindowButtonColors closeButtonColors
  +Widget build()
}

"negate::ui::window_decorations.dart::WindowButtons" o-- "bitsdojo_window::src::widgets::window_button.dart::WindowButtonColors"
"flutter::src::widgets::framework.dart::StatelessWidget" <|-- "negate::ui::window_decorations.dart::WindowButtons"


@enduml